from neural_de.transformations import CenteredZoom
import numpy as np
from pathlib import Path
import cv2

TESTS_FOLDER = Path(__file__).parent.parent.parent.resolve()


class TestCenteredZoom:
    def test_transform(self):
        orig_path = Path(TESTS_FOLDER / 'regression/data/centered_zoom/in.png')
        orig_img = cv2.imread(str(orig_path))
        orig_img = cv2.cvtColor(orig_img, cv2.COLOR_BGR2RGB)
        result_path = Path(TESTS_FOLDER / 'regression/data/centered_zoom/out.png')
        result_img = cv2.imread(str(result_path))
        result_img = cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB)
        # For now out image is generated by Nelson's code with ratio 0.4 (meaning crop_ratio) so the keep ratio is 0.6
        KEEP_RATIO = 0.4
        purifier = CenteredZoom(keep_ratio=KEEP_RATIO)
        purified = purifier.transform([orig_img])[0]
        print(orig_img.shape)
        print(result_img.shape)
        print(purified.shape)
        assert np.mean(abs((purified).astype(np.uint8) - result_img.astype(np.uint8))) < 0.01
